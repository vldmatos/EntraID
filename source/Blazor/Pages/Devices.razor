@page "/devices"

@attribute [Authorize]

@inject HttpClient _httpClient
@inject IAccessTokenProvider _accessTokenProvider

<PageTitle>Devices</PageTitle>

<h1>Devices Data</h1>
<p>This component gets data devices from API with authorization scope</p>

<h3>Device List</h3>

@if (devices == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Signal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Name</td>
                    <td>@device.Signal.ToString("F3")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private List<Device>? devices;
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDevicesAsync();
        timer = new Timer(async _ => await LoadDevicesAsync(), null, 0, 5000);
    }

    private async Task LoadDevicesAsync()
    {
        var tokenResult = await _accessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            devices = await _httpClient.GetFromJsonAsync<List<Device>>("devices");

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
